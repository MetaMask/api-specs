{
    "openrpc": "1.2.4",
    "info": {
        "title": "MetaMask JSON-RPC API Reference",
        "version": "1.0.0"
    },
    "methods": [
        {
            "name": "eth_subscribe",
            "summary": "Subscribes to specific Ethereum events, returning a subscription ID used to receive notifications.",
            "description": "The eth_subscribe method allows clients to subscribe to specific events on the Ethereum network, such as new blocks, new pending transactions, or changes in the state of an account. When an event occurs, a notification is sent to the client with the corresponding data. To stop receiving notifications, the client can unsubscribe using the eth_unsubscribe method.",
            "params": [
                {
                    "name": "subscriptionType",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "enum": [
                            "newHeads",
                            "logs",
                            "newPendingTransactions",
                            "syncing"
                        ],
                        "description": "The type of subscription to create. Must be one of:`newHeads`: new block headers - `logs`: logs matching a filter object - `newPendingTransactions`: new pending transactions - `syncing`: changes in syncing status"
                    }
                },
                {
                    "name": "filterOptions",
                    "schema": {
                        "type": "object",
                        "description": "An optional object containing filter options specific to the subscription type. Only applicable for 'logs' subscription type.",
                        "properties": {
                            "address": {
                                "type": "string",
                                "description": "A single address or an array of addresses to filter the logs by. Optional."
                            },
                            "topics": {
                                "type": "array",
                                "description": "An array of topics to filter the logs by. Optional."
                            }
                        }
                    }
                }
            ],
            "result": {
                "name": "subscriptionId",
                "schema": {
                    "type": "string"
                },
                "description": "A unique subscription ID that can be used to unsubscribe or identify incoming notifications."
            },
            "examples": [
                {
                    "name": "eth_subscribe example",
                    "params": [
                        {
                            "name": "subscriptionType",
                            "value": "newHeads"
                        }
                    ],
                    "result": {
                        "name": "eth_subscribeExampleResult",
                        "value": "0x1b84f2cdf29a204b79e450c1939b30c1"
                    }
                }
            ]
        },
        {
            "name": "eth_unsubscribe",
            "summary": "Unsubscribes from a specific Ethereum event, using the subscription ID provided by eth_subscribe.",
            "description": "The eth_unsubscribe method allows clients to unsubscribe from specific events on the Ethereum network, to which they have previously subscribed using the eth_subscribe method. The client needs to provide the subscription ID obtained from eth_subscribe to stop receiving notifications for the corresponding event.",
            "params": [
                {
                    "name": "subscriptionId",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "description": "The unique subscription ID obtained from the eth_subscribe method, used to identify the subscription to be unsubscribed."
                    }
                }
            ],
            "result": {
                "name": "unsubscribed",
                "schema": {
                    "type": "boolean"
                },
                "description": "A boolean value indicating whether the unsubscription was successful."
            },
            "examples": [
                {
                    "name": "eth_unsubscribe example",
                    "params": [
                        {
                            "name": "subscriptionId",
                            "value": "0x1b84f2cdf29a204b79e450c1939b30c1"
                        }
                    ],
                    "result": {
                        "name": "eth_unsubscribeExampleResult",
                        "value": true
                    }
                }
            ]
        },
        {
            "name": "wallet_addEthereumChain",
            "tags": [
                {
                    "$ref": "#/components/tags/MetaMask"
                }
            ],
            "summary": "Adds an Ethereum chain to the wallet.",
            "description": "Creates a confirmation asking the user to add the specified chain to the wallet application. The caller must specify a chain ID and some chain metadata. The wallet application may refuse or accept the request. `null` is returned if the chain is added, and an error otherwise. Introduced by [EIP 3085](https://eips.ethereum.org/EIPS/eip-3085).",
            "params": [
                {
                    "name": "AddEthereumChainParameter",
                    "schema": {
                        "$ref": "#/components/schemas/AddEthereumChainParameter"
                    }
                }
            ],
            "errors": [
                {
                    "code": -32602,
                    "message": "Expected null or array with at least one valid string HTTPS URL 'blockExplorerUrl'. Received: ${blockExplorerUrls}"
                },
                {
                    "code": -32602,
                    "message": "Expected 0x-prefixed, unpadded, non-zero hexadecimal string 'chainId'. Received:\n${chainId}"
                },
                {
                    "code": -32602,
                    "message": "Invalid chain ID \"${_chainId}\": numerical value greater than max safe value. Received:\n${chainId}"
                },
                {
                    "code": -32602,
                    "message": "May not specify default MetaMask chain."
                },
                {
                    "code": -32602,
                    "message": "Expected 2-6 character string 'nativeCurrency.symbol'. Received:\n${ticker}"
                },
                {
                    "code": -32602,
                    "message": "nativeCurrency.symbol does not match currency symbol for a network the user already has added with the same chainId. Received:\n${ticker}"
                }
            ],
            "result": {
                "name": "AddEthereumChainResult",
                "schema": {
                    "type": "null"
                }
            },
            "examples": [
                {
                    "name": "wallet_addEthereumChain example",
                    "params": [
                        {
                            "name": "AddEthereumChainParameter",
                            "value": {
                                "chainId": "0x64",
                                "chainName": "Gnosis",
                                "rpcUrls": [
                                    "https://dai.poa.network"
                                ],
                                "iconUrls": [
                                    "https://xdaichain.com/fake/example/url/xdai.svg",
                                    "https://xdaichain.com/fake/example/url/xdai.png"
                                ],
                                "nativeCurrency": {
                                    "name": "xDAI",
                                    "symbol": "xDAI",
                                    "decimals": 18
                                },
                                "blockExplorerUrls": [
                                    "https://blockscout.com/poa/xdai/"
                                ]
                            }
                        }
                    ],
                    "result": {
                        "name": "wallet_addEthereumChainExampleResult",
                        "value": "null"
                    }
                }
            ]
        },
        {
            "name": "wallet_switchEthereumChain",
            "tags": [
                {
                    "$ref": "#/components/tags/MetaMask"
                }
            ],
            "summary": "Switches the wallet's active Ethereum chain.",
            "description": "Requests that the wallet switches its active Ethereum chain. Introduced by [EIP 3326](https://ethereum-magicians.org/t/eip-3326-wallet-switchethereumchain).",
            "params": [
                {
                    "name": "SwitchEthereumChainParameter",
                    "schema": {
                        "title": "SwitchEthereumChainParameter",
                        "type": "object",
                        "required": [
                            "chainId"
                        ],
                        "properties": {
                            "chainId": {
                                "description": "MUST specify the integer ID of the chain as a hexadecimal string, per the eth_chainId Ethereum RPC method.",
                                "type": "string"
                            }
                        }
                    }
                }
            ],
            "result": {
                "name": "SwitchEthereumChainResult",
                "schema": {
                    "type": "null"
                }
            },
            "errors": [
                {
                    "code": 4902,
                    "message": "Unrecognized chain ID. Try adding the chain using `wallet_addEthereumChain` first."
                }
            ],
            "examples": [
                {
                    "name": "wallet_switchEthereumChain example",
                    "params": [
                        {
                            "name": "SwitchEthereumChainParameter",
                            "value": {
                                "chainId": "0x64"
                            }
                        }
                    ],
                    "result": {
                        "name": "wallet_switchEthereumChainExampleResult",
                        "value": "null"
                    }
                }
            ]
        },
        {
            "name": "wallet_requestPermissions",
            "tags": [
                {
                    "$ref": "#/components/tags/MetaMask"
                }
            ],
            "summary": "Requests additional permissions.",
            "description": "Requests additional permissions from the user. Introduced by [EIP-2255](https://eips.ethereum.org/EIPS/eip-2255).",
            "params": [
                {
                    "name": "requestPermissionsObject",
                    "required": true,
                    "schema": {
                        "title": "requestPermissionObject",
                        "type": "object",
                        "properties": {
                            "eth_accounts": {
                                "type": "object"
                            }
                        }
                    }
                }
            ],
            "result": {
                "name": "PermissionsList",
                "schema": {
                    "$ref": "#/components/schemas/PermissionsList"
                }
            },
            "examples": [
                {
                    "name": "wallet_requestPermissions example",
                    "params": [
                        {
                            "name": "requestPermissionObject",
                            "value": {
                                "eth_accounts": {}
                            }
                        }
                    ],
                    "result": {
                        "name": "permissionList",
                        "value": {}
                    }
                }
            ]
        },
        {
            "tags": [
                {
                    "$ref": "#/components/tags/MetaMask"
                }
            ],
            "name": "wallet_getPermissions",
            "summary": "Gets the user's permissions.",
            "description": "Gets the user's permissions. Introduced by [EIP-2255](https://eips.ethereum.org/EIPS/eip-2255).",
            "params": [],
            "result": {
                "name": "PermissionsList",
                "schema": {
                    "$ref": "#/components/schemas/PermissionsList"
                }
            }
        },
        {
            "tags": [
                {
                    "$ref": "#/components/tags/MetaMask"
                }
            ],
            "name": "wallet_registerOnboarding",
            "summary": "Redirects the user back to the site after onboarding.",
            "description": "Registers the requesting site with MetaMask as the initiator of onboarding, enabling MetaMask to redirect the user back to the site after onboarding. Returns a promise that resolves to `true`, or rejects if there's an error. Instead of calling this method directly, you should use the [`@metamask/onboarding`](https://github.com/MetaMask/metamask-onboarding) library.",
            "params": [],
            "result": {
                "name": "RegisterOnboardingResult",
                "description": "`true` if the request was successful, `false` otherwise.",
                "schema": {
                    "type": "boolean"
                }
            }
        },
        {
            "name": "wallet_watchAsset",
            "tags": [
                {
                    "$ref": "#/components/tags/MetaMask"
                }
            ],
            "summary": "Tracks a token in MetaMask.",
            "description": "Requests that the user track the specified token in MetaMask. Returns a boolean indicating if the token was successfully added. Once added, the token is indistinguishable from those added using legacy methods, such as a centralized registry. Introduced by [EIP-747](https://eips.ethereum.org/EIPS/eip-747).",
            "paramStructure": "by-name",
            "params": [
                {
                    "name": "type",
                    "schema": {
                        "type": "string",
                        "description": "Currently only supports ERC-20 tokens.",
                        "enum": [
                            "ERC20"
                        ]
                    }
                },
                {
                    "name": "options",
                    "schema": {
                        "type": "object",
                        "properties": {
                            "address": {
                                "description": "The address of the token contract.",
                                "type": "string"
                            },
                            "symbol": {
                                "description": "A ticker symbol or shorthand, up to 11 characters.",
                                "minLength": 2,
                                "maxLength": 11,
                                "type": "string"
                            },
                            "decimals": {
                                "description": "The number of token decimals.",
                                "type": "number"
                            },
                            "image": {
                                "description": "A string URL of the token logo.",
                                "type": "string"
                            }
                        }
                    }
                }
            ],
            "result": {
                "name": "WatchAssetResult",
                "description": "`true` if the token was added, `false` otherwise.",
                "schema": {
                    "type": "boolean"
                }
            },
            "examples": [
                {
                    "name": "wallet_watchAsset example",
                    "params": [
                        {
                            "name": "type",
                            "value": "ERC20"
                        },
                        {
                            "name": "options",
                            "value": {
                                "address": "0xb60e8dd61c5d32be8058bb8eb970870f07233155",
                                "symbol": "FOO",
                                "decimals": 18,
                                "image": "https: //foo.io/token-image.svg"
                            }
                        }
                    ],
                    "result": {
                        "name": "wallet_watchAssetExampleResult",
                        "value": true
                    }
                }
            ]
        },
        {
            "name": "eth_decrypt",
            "tags": [
                {
                    "$ref": "#/components/tags/MetaMask"
                }
            ],
            "summary": "Decrypts an encrypted message.",
            "description": "Requests that MetaMask decrypt the specified encrypted message. The message must have been encrypted using the public encryption key of the specified Ethereum address. Returns a promise that resolves to the decrypted message, or rejects if the decryption attempt fails.",
            "params": [
                {
                    "name": "EncryptedMessage",
                    "required": true,
                    "description": "The encrypted message to decrypt.",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "name": "Address",
                    "required": true,
                    "description": "The address of the Ethereum account that can decrypt the message.",
                    "schema": {
                        "$ref": "#/components/schemas/address"
                    }
                }
            ],
            "result": {
                "name": "PermissionsList",
                "schema": {
                    "$ref": "#/components/schemas/PermissionsList"
                }
            }
        },
        {
            "tags": [
                {
                    "$ref": "#/components/tags/MetaMask"
                }
            ],
            "name": "eth_getEncryptionPublicKey",
            "summary": "Gets a public key used for encryption.",
            "description": "Requests that the user share their public encryption key. Returns a public encryption key, or rejects if the user denies the request. The public key is computed from entropy associated with the specified user account, using the NaCl implementation of the `X25519_XSalsa20_Poly1305` algorithm.",
            "params": [
                {
                    "name": "Address",
                    "required": true,
                    "description": "The address of the Ethereum account that can decrypt the message.",
                    "schema": {
                        "$ref": "#/components/schemas/address"
                    }
                }
            ],
            "result": {
                "name": "EncryptionKey",
                "schema": {
                    "type": "string"
                }
            }
        },
        {
            "tags": [
                {
                    "$ref": "#/components/tags/MetaMask"
                },
                {
                    "$ref": "#/components/tags/Restricted"
                }
            ],
            "name": "eth_accounts",
            "description": "Returns a list of addresses for the accounts owned by the user.",
            "summary": "Gets a list of addresses for the user's accounts.",
            "params": [],
            "result": {
                "name": "AddressList",
                "schema": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/address"
                    }
                }
            }
        },
        {
            "name": "eth_signTypedData_v4",
            "tags": [
                {
                    "$ref": "#/components/tags/MetaMask"
                }
            ],
            "summary": "Presents a structured data message for the user to sign.",
            "description": "Presents a data message for the user to sign in a structured and readable format and returns the signed response. Introduced By [EIP-712](https://eips.ethereum.org/EIPS/eip-712).",
            "params": [
                {
                    "name": "Address",
                    "required": true,
                    "description": "The address of the requested signing account.",
                    "schema": {
                        "$ref": "#/components/schemas/address"
                    }
                },
                {
                    "name": "TypedData",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/TypedData"
                    }
                }
            ],
            "result": {
                "name": "Signature",
                "schema": {
                    "$ref": "#/components/schemas/bytes"
                }
            },
            "examples": [
                {
                    "name": "eth_SignTypedData_v4 example",
                    "params": [
                        {
                            "name": "Address",
                            "value": "0x0000000000000000000000000000000000000000"
                        },
                        {
                            "name": "TypedData",
                            "value": {
                                "types": {
                                    "EIP712Domain": [
                                        {
                                            "name": "name",
                                            "type": "string"
                                        },
                                        {
                                            "name": "version",
                                            "type": "string"
                                        },
                                        {
                                            "name": "chainId",
                                            "type": "uint256"
                                        },
                                        {
                                            "name": "verifyingContract",
                                            "type": "address"
                                        }
                                    ],
                                    "Person": [
                                        {
                                            "name": "name",
                                            "type": "string"
                                        },
                                        {
                                            "name": "wallet",
                                            "type": "address"
                                        }
                                    ],
                                    "Mail": [
                                        {
                                            "name": "from",
                                            "type": "Person"
                                        },
                                        {
                                            "name": "to",
                                            "type": "Person"
                                        },
                                        {
                                            "name": "contents",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "primaryType": "Mail",
                                "domain": {
                                    "name": "Ether Mail",
                                    "version": "1",
                                    "chainId": 1,
                                    "verifyingContract": "0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC"
                                },
                                "message": {
                                    "from": {
                                        "name": "Cow",
                                        "wallet": "0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826"
                                    },
                                    "to": {
                                        "name": "Bob",
                                        "wallet": "0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB"
                                    },
                                    "contents": "Hello, Bob!"
                                }
                            }
                        }
                    ],
                    "result": {
                        "name": "Signature",
                        "value": "0x4355c47d63924e8a72e509b65029052eb6c299d53a04e167c5775fd466751c9d07299936d304c153f6443dfa05f40ff007d72911b6f72307f996231605b915621c"
                    }
                }
            ]
        },
        {
            "name": "personal_sign",
            "summary": "Presents a plain text signature challenge to the user.",
            "description": "Presents a plain text signature challenge to the user and returns the signed response. Equivalent to `eth_sign` on some other wallets, and prepends a safe prefix to the signed message to prevent the challenge tricking users into signing a financial transaction. This method requires that the user has granted permission to interact with their account first, so make sure to call `eth_requestAccounts` first.",
            "deprecated": false,
            "params": [
                {
                    "name": "Challenge",
                    "required": true,
                    "description": "A hex-encoded UTF-8 string to present to the user. See how to encode a string like this in the [`browser-string-hexer`](https://github.com/danfinlay/browser-string-hexer) module.",
                    "schema": {
                        "type": "string",
                        "pattern": "^0x[a-fA-F\\d]+$"
                    }
                },
                {
                    "name": "Address",
                    "required": true,
                    "description": "The address of the requested signing account.",
                    "schema": {
                        "$ref": "#/components/schemas/address"
                    }
                }
            ],
            "result": {
                "name": "Signature",
                "description": "A hex-encoded 129-byte array starting with `0x`.",
                "schema": {
                    "$ref": "#/components/schemas/bytes"
                }
            }
        },
        {
            "name": "eth_getBlockByHash",
            "summary": "Returns information about a block by hash.",
            "params": [
                {
                    "name": "Block hash",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/hash32"
                    }
                },
                {
                    "name": "Hydrated transactions",
                    "required": true,
                    "schema": {
                        "title": "hydrated",
                        "type": "boolean"
                    }
                }
            ],
            "result": {
                "name": "Block information",
                "schema": {
                    "$ref": "#/components/schemas/Block"
                }
            }
        },
        {
            "name": "eth_getBlockByNumber",
            "summary": "Returns information about a block by number.",
            "params": [
                {
                    "name": "Block",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/BlockNumberOrTag"
                    }
                },
                {
                    "name": "Hydrated transactions",
                    "required": true,
                    "schema": {
                        "title": "hydrated",
                        "type": "boolean"
                    }
                }
            ],
            "result": {
                "name": "Block information",
                "schema": {
                    "$ref": "#/components/schemas/Block"
                }
            }
        },
        {
            "name": "eth_getBlockTransactionCountByHash",
            "summary": "Returns the number of transactions in a block from a block matching the given block hash.",
            "params": [
                {
                    "name": "Block hash",
                    "schema": {
                        "$ref": "#/components/schemas/hash32"
                    }
                }
            ],
            "result": {
                "name": "Transaction count",
                "schema": {
                    "$ref": "#/components/schemas/uint"
                }
            }
        },
        {
            "name": "eth_getBlockTransactionCountByNumber",
            "summary": "Returns the number of transactions in a block matching the given block number.",
            "params": [
                {
                    "name": "Block",
                    "schema": {
                        "$ref": "#/components/schemas/BlockNumberOrTag"
                    }
                }
            ],
            "result": {
                "name": "Transaction count",
                "schema": {
                    "$ref": "#/components/schemas/uint"
                }
            }
        },
        {
            "name": "eth_getUncleCountByBlockHash",
            "summary": "Returns the number of uncles in a block from a block matching the given block hash.",
            "params": [
                {
                    "name": "Block hash",
                    "schema": {
                        "$ref": "#/components/schemas/hash32"
                    }
                }
            ],
            "result": {
                "name": "Uncle count",
                "schema": {
                    "$ref": "#/components/schemas/uint"
                }
            }
        },
        {
            "name": "eth_getUncleCountByBlockNumber",
            "summary": "Returns the number of transactions in a block matching the given block number.",
            "params": [
                {
                    "name": "Block",
                    "schema": {
                        "$ref": "#/components/schemas/BlockNumberOrTag"
                    }
                }
            ],
            "result": {
                "name": "Uncle count",
                "schema": {
                    "$ref": "#/components/schemas/uint"
                }
            }
        },
        {
            "name": "eth_chainId",
            "summary": "Returns the chain ID of the current network.",
            "params": [],
            "result": {
                "name": "Chain ID",
                "schema": {
                    "$ref": "#/components/schemas/uint"
                }
            }
        },
        {
            "name": "eth_syncing",
            "summary": "Returns an object with data about the sync status or false.",
            "params": [],
            "result": {
                "name": "Syncing status",
                "schema": {
                    "$ref": "#/components/schemas/SyncingStatus"
                }
            }
        },
        {
            "name": "eth_coinbase",
            "summary": "Returns the client coinbase address.",
            "params": [],
            "result": {
                "name": "Coinbase address",
                "schema": {
                    "$ref": "#/components/schemas/address"
                }
            }
        },
        {
            "name": "eth_accounts",
            "summary": "Returns a list of addresses owned by client.",
            "params": [],
            "result": {
                "name": "Accounts",
                "schema": {
                    "title": "Accounts",
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/address"
                    }
                }
            }
        },
        {
            "name": "eth_blockNumber",
            "summary": "Returns the number of most recent block.",
            "params": [],
            "result": {
                "name": "Block number",
                "schema": {
                    "$ref": "#/components/schemas/uint"
                }
            }
        },
        {
            "name": "eth_call",
            "summary": "Executes a new message call immediately without creating a transaction on the block chain.",
            "params": [
                {
                    "name": "Transaction",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/GenericTransaction"
                    }
                },
                {
                    "name": "Block",
                    "required": false,
                    "schema": {
                        "$ref": "#/components/schemas/BlockNumberOrTagOrHash"
                    }
                }
            ],
            "result": {
                "name": "Return data",
                "schema": {
                    "$ref": "#/components/schemas/bytes"
                }
            }
        },
        {
            "name": "eth_estimateGas",
            "summary": "Generates and returns an estimate of how much gas is necessary to allow the transaction to complete.",
            "params": [
                {
                    "name": "Transaction",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/GenericTransaction"
                    }
                },
                {
                    "name": "Block",
                    "required": false,
                    "schema": {
                        "$ref": "#/components/schemas/BlockNumberOrTag"
                    }
                }
            ],
            "result": {
                "name": "Gas used",
                "schema": {
                    "$ref": "#/components/schemas/uint"
                }
            }
        },
        {
            "name": "eth_createAccessList",
            "summary": "Generates an access list for a transaction.",
            "params": [
                {
                    "name": "Transaction",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/GenericTransaction"
                    }
                },
                {
                    "name": "Block",
                    "required": false,
                    "schema": {
                        "$ref": "#/components/schemas/BlockNumberOrTag"
                    }
                }
            ],
            "result": {
                "name": "Gas used",
                "schema": {
                    "title": "Access list result",
                    "type": "object",
                    "properties": {
                        "accessList": {
                            "title": "accessList",
                            "$ref": "#/components/schemas/AccessList"
                        },
                        "error": {
                            "title": "error",
                            "type": "string"
                        },
                        "gasUsed": {
                            "title": "Gas used",
                            "$ref": "#/components/schemas/uint"
                        }
                    }
                }
            }
        },
        {
            "name": "eth_gasPrice",
            "summary": "Returns the current price per gas in wei.",
            "params": [],
            "result": {
                "name": "Gas price",
                "schema": {
                    "title": "Gas price",
                    "$ref": "#/components/schemas/uint"
                }
            }
        },
        {
            "name": "eth_maxPriorityFeePerGas",
            "summary": "Returns the current maxPriorityFeePerGas per gas in wei.",
            "params": [],
            "result": {
                "name": "Max priority fee per gas",
                "schema": {
                    "title": "Max priority fee per gas",
                    "$ref": "#/components/schemas/uint"
                }
            }
        },
        {
            "name": "eth_feeHistory",
            "summary": "Transaction fee history",
            "description": "Returns transaction base fee per gas and effective priority fee per gas for the requested/supported block range.",
            "params": [
                {
                    "name": "blockCount",
                    "description": "Requested range of blocks. Clients will return less than the requested range if not all blocks are available.",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/uint"
                    }
                },
                {
                    "name": "newestBlock",
                    "description": "Highest block of the requested range.",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/BlockNumberOrTag"
                    }
                },
                {
                    "name": "rewardPercentiles",
                    "description": "A monotonically increasing list of percentile values. For each block in the requested range, the transactions will be sorted in ascending order by effective tip per gas and the coresponding effective tip for the percentile will be determined, accounting for gas consumed.",
                    "required": true,
                    "schema": {
                        "title": "rewardPercentiles",
                        "type": "array",
                        "items": {
                            "title": "rewardPercentile",
                            "description": "Floating point value between 0 and 100.",
                            "type": "number"
                        }
                    }
                }
            ],
            "result": {
                "name": "feeHistoryResult",
                "description": "Fee history for the returned block range. This can be a subsection of the requested range if not all blocks are available.",
                "schema": {
                    "title": "feeHistoryResults",
                    "description": "Fee history results.",
                    "type": "object",
                    "required": [
                        "oldestBlock",
                        "baseFeePerGas",
                        "gasUsedRatio"
                    ],
                    "properties": {
                        "oldestBlock": {
                            "title": "oldestBlock",
                            "description": "Lowest number block of returned range.",
                            "$ref": "#/components/schemas/uint"
                        },
                        "baseFeePerGas": {
                            "title": "baseFeePerGasArray",
                            "description": "An array of block base fees per gas. This includes the next block after the newest of the returned range, because this value can be derived from the newest block. Zeroes are returned for pre-EIP-1559 blocks.",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/uint"
                            }
                        },
                        "reward": {
                            "title": "rewardArray",
                            "description": "A two-dimensional array of effective priority fees per gas at the requested block percentiles.",
                            "type": "array",
                            "items": {
                                "title": "rewardPercentile",
                                "description": "An array of effective priority fee per gas data points from a single block. All zeroes are returned if the block is empty.",
                                "type": "array",
                                "items": {
                                    "title": "rewardPercentile",
                                    "description": "A given percentile sample of effective priority fees per gas from a single block in ascending order, weighted by gas used. Zeroes are returned if the block is empty.",
                                    "$ref": "#/components/schemas/uint"
                                }
                            }
                        }
                    }
                }
            }
        },
        {
            "name": "eth_newFilter",
            "summary": "Creates a filter object, based on filter options, to notify when the state changes (logs).",
            "params": [
                {
                    "name": "Filter",
                    "schema": {
                        "$ref": "#/components/schemas/Filter"
                    }
                }
            ],
            "result": {
                "name": "Filter Identifier",
                "schema": {
                    "$ref": "#/components/schemas/uint"
                }
            }
        },
        {
            "name": "eth_newBlockFilter",
            "summary": "Creates a filter in the node, to notify when a new block arrives.",
            "params": [],
            "result": {
                "name": "Filter Identifier",
                "schema": {
                    "$ref": "#/components/schemas/uint"
                }
            }
        },
        {
            "name": "eth_newPendingTransactionFilter",
            "summary": "Creates a filter in the node, to notify when new pending transactions arrive.",
            "params": [],
            "result": {
                "name": "Filter Identifier",
                "schema": {
                    "$ref": "#/components/schemas/uint"
                }
            }
        },
        {
            "name": "eth_uninstallFilter",
            "summary": "Uninstalls a filter with given id.",
            "params": [
                {
                    "name": "Filter Identifier",
                    "schema": {
                        "$ref": "#/components/schemas/uint"
                    }
                }
            ],
            "result": {
                "name": "Success",
                "schema": {
                    "type": "boolean"
                }
            }
        },
        {
            "name": "eth_getFilterChanges",
            "summary": "Polling method for a filter, which returns an array of logs which occurred since last poll.",
            "params": [
                {
                    "name": "Filter Identifier",
                    "schema": {
                        "$ref": "#/components/schemas/uint"
                    }
                }
            ],
            "result": {
                "name": "Log objects",
                "schema": {
                    "$ref": "#/components/schemas/FilterResults"
                }
            }
        },
        {
            "name": "eth_getFilterLogs",
            "summary": "Returns an array of all logs matching filter with given id.",
            "params": [
                {
                    "name": "Filter Identifier",
                    "schema": {
                        "$ref": "#/components/schemas/uint"
                    }
                }
            ],
            "result": {
                "name": "Log objects",
                "schema": {
                    "$ref": "#/components/schemas/FilterResults"
                }
            }
        },
        {
            "name": "eth_getLogs",
            "summary": "Returns an array of all logs matching filter with given id.",
            "params": [
                {
                    "name": "Filter",
                    "schema": {
                        "$ref": "#/components/schemas/Filter"
                    }
                }
            ],
            "result": {
                "name": "Log objects",
                "schema": {
                    "$ref": "#/components/schemas/FilterResults"
                }
            }
        },
        {
            "name": "eth_mining",
            "summary": "Returns whether the client is actively mining new blocks.",
            "params": [],
            "result": {
                "name": "Mining status",
                "schema": {
                    "title": "miningStatus",
                    "type": "boolean"
                }
            }
        },
        {
            "name": "eth_hashrate",
            "summary": "Returns the number of hashes per second that the node is mining with.",
            "params": [],
            "result": {
                "name": "Mining status",
                "schema": {
                    "title": "Hashrate",
                    "$ref": "#/components/schemas/uint"
                }
            }
        },
        {
            "name": "eth_getWork",
            "summary": "Returns the hash of the current block, the seedHash, and the boundary condition to be met (“target”).",
            "params": [],
            "result": {
                "name": "Current work",
                "schema": {
                    "type": "array",
                    "items": [
                        {
                            "title": "Proof-of-work hash",
                            "$ref": "#/components/schemas/bytes32"
                        },
                        {
                            "title": "seed hash",
                            "$ref": "#/components/schemas/bytes32"
                        },
                        {
                            "title": "difficulty",
                            "$ref": "#/components/schemas/bytes32"
                        }
                    ]
                }
            }
        },
        {
            "name": "eth_submitWork",
            "summary": "Used for submitting a proof-of-work solution.",
            "params": [
                {
                    "name": "nonce",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/bytes8"
                    }
                },
                {
                    "name": "hash",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/bytes32"
                    }
                },
                {
                    "name": "digest",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/bytes32"
                    }
                }
            ],
            "result": {
                "name": "Success",
                "schema": {
                    "type": "boolean"
                }
            }
        },
        {
            "name": "eth_submitHashrate",
            "summary": "Used for submitting mining hashrate.",
            "params": [
                {
                    "name": "Hashrate",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/bytes32"
                    }
                },
                {
                    "name": "ID",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/bytes32"
                    }
                }
            ],
            "result": {
                "name": "Success",
                "schema": {
                    "type": "boolean"
                }
            }
        },
        {
            "name": "eth_getBalance",
            "summary": "Returns the balance of the account of given address.",
            "params": [
                {
                    "name": "Address",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/address"
                    }
                },
                {
                    "name": "Block",
                    "required": false,
                    "schema": {
                        "$ref": "#/components/schemas/BlockNumberOrTagOrHash"
                    }
                }
            ],
            "result": {
                "name": "Balance",
                "schema": {
                    "$ref": "#/components/schemas/uint"
                }
            }
        },
        {
            "name": "eth_getStorageAt",
            "summary": "Returns the value from a storage position at a given address.",
            "params": [
                {
                    "name": "Address",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/address"
                    }
                },
                {
                    "name": "Storage slot",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/uint256"
                    }
                },
                {
                    "name": "Block",
                    "required": false,
                    "schema": {
                        "$ref": "#/components/schemas/BlockNumberOrTagOrHash"
                    }
                }
            ],
            "result": {
                "name": "Value",
                "schema": {
                    "$ref": "#/components/schemas/bytes"
                }
            }
        },
        {
            "name": "eth_getTransactionCount",
            "summary": "Returns the number of transactions sent from an address.",
            "params": [
                {
                    "name": "Address",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/address"
                    }
                },
                {
                    "name": "Block",
                    "required": false,
                    "schema": {
                        "$ref": "#/components/schemas/BlockNumberOrTagOrHash"
                    }
                }
            ],
            "result": {
                "name": "Transaction count",
                "schema": {
                    "$ref": "#/components/schemas/uint"
                }
            }
        },
        {
            "name": "eth_getCode",
            "summary": "Returns code at a given address.",
            "params": [
                {
                    "name": "Address",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/address"
                    }
                },
                {
                    "name": "Block",
                    "required": false,
                    "schema": {
                        "$ref": "#/components/schemas/BlockNumberOrTagOrHash"
                    }
                }
            ],
            "result": {
                "name": "Bytecode",
                "schema": {
                    "$ref": "#/components/schemas/bytes"
                }
            }
        },
        {
            "name": "eth_getProof",
            "summary": "Returns the merkle proof for a given account and optionally some storage keys.",
            "params": [
                {
                    "name": "Address",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/address"
                    }
                },
                {
                    "name": "StorageKeys",
                    "required": true,
                    "schema": {
                        "title": "Storage keys",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/bytesMax32"
                        }
                    }
                },
                {
                    "name": "Block",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/BlockNumberOrTagOrHash"
                    }
                }
            ],
            "result": {
                "name": "Account",
                "schema": {
                    "$ref": "#/components/schemas/AccountProof"
                }
            }
        },
        {
            "name": "eth_sendTransaction",
            "summary": "Signs and submits a transaction.",
            "params": [
                {
                    "name": "Transaction",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/GenericTransaction"
                    }
                }
            ],
            "result": {
                "name": "Transaction hash",
                "schema": {
                    "$ref": "#/components/schemas/hash32"
                }
            }
        },
        {
            "name": "eth_sendRawTransaction",
            "summary": "Submits a raw transaction.",
            "params": [
                {
                    "name": "Transaction",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/bytes"
                    }
                }
            ],
            "result": {
                "name": "Transaction hash",
                "schema": {
                    "$ref": "#/components/schemas/hash32"
                }
            }
        },
        {
            "name": "eth_getTransactionByHash",
            "summary": "Returns the information about a transaction requested by transaction hash.",
            "params": [
                {
                    "name": "Transaction hash",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/hash32"
                    }
                }
            ],
            "result": {
                "name": "Transaction information",
                "schema": {
                    "$ref": "#/components/schemas/TransactionInfo"
                }
            }
        },
        {
            "name": "eth_getTransactionByBlockHashAndIndex",
            "summary": "Returns information about a transaction by block hash and transaction index position.",
            "params": [
                {
                    "name": "Block hash",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/hash32"
                    }
                },
                {
                    "name": "Transaction index",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/uint"
                    }
                }
            ],
            "result": {
                "name": "Transaction information",
                "schema": {
                    "$ref": "#/components/schemas/TransactionInfo"
                }
            }
        },
        {
            "name": "eth_getTransactionByBlockNumberAndIndex",
            "summary": "Returns information about a transaction by block number and transaction index position.",
            "params": [
                {
                    "name": "Block",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/BlockNumberOrTag"
                    }
                },
                {
                    "name": "Transaction index",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/uint"
                    }
                }
            ],
            "result": {
                "name": "Transaction information",
                "schema": {
                    "$ref": "#/components/schemas/TransactionInfo"
                }
            }
        },
        {
            "name": "eth_getTransactionReceipt",
            "summary": "Returns the receipt of a transaction by transaction hash.",
            "params": [
                {
                    "name": "Transaction hash",
                    "schema": {
                        "$ref": "#/components/schemas/hash32"
                    }
                }
            ],
            "result": {
                "name": "Receipt Information",
                "schema": {
                    "$ref": "#/components/schemas/ReceiptInfo"
                }
            }
        }
    ],
    "components": {
        "errors": {},
        "schemas": {
            "TypedData": {
                "title": "TypedData",
                "type": "object",
                "required": [
                    "types",
                    "primaryType",
                    "domain",
                    "message"
                ],
                "properties": {
                    "types": {
                        "type": "object",
                        "required": [
                            "EIP712Domain"
                        ],
                        "properties": {
                            "EIP712Domain": {
                                "type": "array",
                                "description": "An array specifying one or more of the following domain separator values: 1) 'name' - The user-readable name of signing domain, i.e., the name of the dapp or the protocol. 2) 'version' - The current major version of the signing domain. 3) 'chainId' - The EIP-155 chain ID. 4) 'verifyingContract' - The address of the contract that will verify the signature. 5) 'salt' - A disambiguating salt for the protocol."
                            }
                        },
                        "additionalProperties": {
                            "type": "array",
                            "required": [
                                "name",
                                "type"
                            ],
                            "items": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "type": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "domain": {
                        "type": "object",
                        "description": "Contains the domain separator values specified in the EIP712Domain type."
                    },
                    "primaryType": {
                        "type": "string"
                    },
                    "message": {
                        "type": "object"
                    }
                }
            },
            "AddEthereumChainParameter": {
                "title": "AddEthereumChainParameter",
                "type": "object",
                "required": [
                    "chainId"
                ],
                "properties": {
                    "chainId": {
                        "description": "MUST specify the integer ID of the chain as a hexadecimal string, per the eth_chainId Ethereum RPC method. The wallet SHOULD compare the specified chain ID value with the eth_chainId return value from the endpoint. If these values aren't identical, the wallet MUST reject the request.",
                        "type": "string"
                    },
                    "blockExplorerUrls": {
                        "description": "If provided, MUST specify one or more URLs pointing to block explorer sites for the chain.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "chainName": {
                        "description": "If provided, MUST specify a human-readable name for the chain.",
                        "type": "string"
                    },
                    "iconUrls": {
                        "description": "If provided, MUST specify one or more URLs pointing to reasonably sized images that can be used to visually identify the chain.",
                        "type": "array",
                        "items": {
                            "format": "uri",
                            "type": "string"
                        }
                    },
                    "nativeCurrency": {
                        "$ref": "#/components/schemas/NativeCurrency"
                    },
                    "rpcUrls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "NativeCurrency": {
                "title": "NativeCurrency",
                "type": "object",
                "description": "If provided, MUST describe the native currency of the chain using the name, symbol, and decimals fields.",
                "required": [
                    "decimals",
                    "name",
                    "symbol"
                ],
                "properties": {
                    "decimals": {
                        "description": "A non-negative integer.",
                        "min": 0,
                        "type": "integer"
                    },
                    "name": {
                        "description": "SHOULD be human-readable.",
                        "type": "string"
                    },
                    "symbol": {
                        "description": "SHOULD be human-readable.",
                        "type": "string"
                    }
                }
            },
            "Permission": {
                "title": "Permission",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Every capability document, except for the target, MUST have an associated ID.",
                        "type": "string"
                    },
                    "@context": {
                        "description": "When two people communicate with one another, the conversation takes place in a shared environment, typically called 'the context of the conversation.' This shared context allows the individuals to use shortcut terms, such as the first name of a mutual friend, to communicate more quickly without losing accuracy. A context in JSON-LD works the same way: it allows two applications to use shortcut terms to communicate more efficiently without losing accuracy.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "invoker": {
                        "description": "Links to one or more instances of cryptographic material (such as public keys) being granted authority to use this capability.",
                        "type": "string"
                    },
                    "caveats": {
                        "description": "Every capability document MAY add restrictions on the way the capability may be used by adding to the caveat property. Capabilities inherit the restrictions from all caveat properties of their parents, and MAY add new caveats in addition to those of their parents.",
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string"
                                },
                                "value": true,
                                "name": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "PermissionsList": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Permission"
                }
            },
            "address": {
                "title": "hex encoded address",
                "type": "string",
                "pattern": "^0x[0-9,a-f,A-F]{40}$"
            },
            "addresses": {
                "title": "hex encoded address",
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/address"
                }
            },
            "byte": {
                "title": "hex encoded byte",
                "type": "string",
                "pattern": "^0x([0-9,a-f,A-F]?){1,2}$"
            },
            "bytes": {
                "title": "hex encoded bytes",
                "type": "string",
                "pattern": "^0x[0-9a-f]*$"
            },
            "bytesMax32": {
                "title": "32 hex encoded bytes",
                "type": "string",
                "pattern": "^0x[0-9a-f]{0,64}$"
            },
            "bytes8": {
                "title": "8 hex encoded bytes",
                "type": "string",
                "pattern": "^0x[0-9a-f]{16}$"
            },
            "bytes32": {
                "title": "32 hex encoded bytes",
                "type": "string",
                "pattern": "^0x[0-9a-f]{64}$"
            },
            "bytes256": {
                "title": "256 hex encoded bytes",
                "type": "string",
                "pattern": "^0x[0-9a-f]{512}$"
            },
            "bytes65": {
                "title": "65 hex encoded bytes",
                "type": "string",
                "pattern": "^0x[0-9a-f]{65}$"
            },
            "uint": {
                "title": "hex encoded unsigned integer",
                "type": "string",
                "pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$"
            },
            "uint64": {
                "title": "hex encoded 64 bit unsigned integer",
                "type": "string",
                "pattern": "^0x([1-9a-f]+[0-9a-f]{0,15})|0$"
            },
            "uint256": {
                "title": "hex encoded 256 bit unsigned integer",
                "type": "string",
                "pattern": "^0x([1-9a-f]+[0-9a-f]{0,31})|0$"
            },
            "hash32": {
                "title": "32 byte hex value",
                "type": "string",
                "pattern": "^0x[0-9a-f]{64}$"
            },
            "Block": {
                "title": "Block object",
                "type": "object",
                "required": [
                    "parentHash",
                    "sha3Uncles",
                    "miner",
                    "stateRoot",
                    "transactionsRoot",
                    "receiptsRoot",
                    "logsBloom",
                    "number",
                    "gasLimit",
                    "gasUsed",
                    "timestamp",
                    "extraData",
                    "mixHash",
                    "nonce",
                    "size",
                    "transactions",
                    "uncles"
                ],
                "properties": {
                    "parentHash": {
                        "title": "Parent block hash",
                        "$ref": "#/components/schemas/hash32"
                    },
                    "sha3Uncles": {
                        "title": "Ommers hash",
                        "$ref": "#/components/schemas/hash32"
                    },
                    "miner": {
                        "title": "Coinbase",
                        "$ref": "#/components/schemas/address"
                    },
                    "stateRoot": {
                        "title": "State root",
                        "$ref": "#/components/schemas/hash32"
                    },
                    "transactionsRoot": {
                        "title": "Transactions root",
                        "$ref": "#/components/schemas/hash32"
                    },
                    "receiptsRoot": {
                        "title": "Receipts root",
                        "$ref": "#/components/schemas/hash32"
                    },
                    "logsBloom": {
                        "title": "Bloom filter",
                        "$ref": "#/components/schemas/bytes256"
                    },
                    "difficulty": {
                        "title": "Difficulty",
                        "$ref": "#/components/schemas/bytes"
                    },
                    "number": {
                        "title": "Number",
                        "$ref": "#/components/schemas/uint"
                    },
                    "gasLimit": {
                        "title": "Gas limit",
                        "$ref": "#/components/schemas/uint"
                    },
                    "gasUsed": {
                        "title": "Gas used",
                        "$ref": "#/components/schemas/uint"
                    },
                    "timestamp": {
                        "title": "Timestamp",
                        "$ref": "#/components/schemas/uint"
                    },
                    "extraData": {
                        "title": "Extra data",
                        "$ref": "#/components/schemas/bytes"
                    },
                    "mixHash": {
                        "title": "Mix hash",
                        "$ref": "#/components/schemas/hash32"
                    },
                    "nonce": {
                        "title": "Nonce",
                        "$ref": "#/components/schemas/bytes8"
                    },
                    "totalDifficulty": {
                        "title": "Total difficulty",
                        "$ref": "#/components/schemas/uint"
                    },
                    "baseFeePerGas": {
                        "title": "Base fee per gas",
                        "$ref": "#/components/schemas/uint"
                    },
                    "withdrawalsRoot": {
                        "title": "Withdrawals root",
                        "$ref": "#/components/schemas/hash32"
                    },
                    "size": {
                        "title": "Block size",
                        "$ref": "#/components/schemas/uint"
                    },
                    "transactions": {
                        "anyOf": [
                            {
                                "title": "Transaction hashes",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/hash32"
                                }
                            },
                            {
                                "title": "Full transactions",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/TransactionSigned"
                                }
                            }
                        ]
                    },
                    "withdrawals": {
                        "title": "Withdrawals",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Withdrawal"
                        }
                    },
                    "uncles": {
                        "title": "Uncles",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/hash32"
                        }
                    }
                }
            },
            "BlockTag": {
                "title": "Block tag",
                "type": "string",
                "enum": [
                    "earliest",
                    "finalized",
                    "safe",
                    "latest",
                    "pending"
                ],
                "description": "`earliest`: The lowest numbered block the client has available; `finalized`: The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination; `safe`: The most recent block that is safe from re-orgs under honest majority and certain synchronicity assumptions; `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions; `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. Before the merge transition is finalized, any call querying for `finalized` or `safe` block MUST be responded to with `-39001: Unknown block` error"
            },
            "BlockNumberOrTag": {
                "title": "Block number or tag",
                "oneOf": [
                    {
                        "title": "Block number",
                        "$ref": "#/components/schemas/uint"
                    },
                    {
                        "title": "Block tag",
                        "$ref": "#/components/schemas/BlockTag"
                    }
                ]
            },
            "BlockNumberOrTagOrHash": {
                "title": "Block number, tag, or block hash",
                "anyOf": [
                    {
                        "title": "Block number",
                        "$ref": "#/components/schemas/uint"
                    },
                    {
                        "title": "Block tag",
                        "$ref": "#/components/schemas/BlockTag"
                    },
                    {
                        "title": "Block hash",
                        "$ref": "#/components/schemas/hash32"
                    }
                ]
            },
            "BadBlock": {
                "title": "Bad block",
                "type": "object",
                "required": [
                    "block",
                    "hash",
                    "rlp"
                ],
                "properties": {
                    "block": {
                        "title": "Block",
                        "$ref": "#/components/schemas/bytes"
                    },
                    "hash": {
                        "title": "Hash",
                        "$ref": "#/components/schemas/hash32"
                    },
                    "rlp": {
                        "title": "RLP",
                        "$ref": "#/components/schemas/bytes"
                    }
                }
            },
            "SyncingStatus": {
                "title": "Syncing status",
                "oneOf": [
                    {
                        "title": "Syncing progress",
                        "type": "object",
                        "properties": {
                            "startingBlock": {
                                "title": "Starting block",
                                "$ref": "#/components/schemas/uint"
                            },
                            "currentBlock": {
                                "title": "Current block",
                                "$ref": "#/components/schemas/uint"
                            },
                            "highestBlock": {
                                "title": "Highest block",
                                "$ref": "#/components/schemas/uint"
                            }
                        }
                    },
                    {
                        "title": "Not syncing",
                        "description": "Should always return false if not syncing.",
                        "type": "boolean"
                    }
                ]
            },
            "FilterResults": {
                "title": "Filter results",
                "oneOf": [
                    {
                        "title": "new block hashes",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/hash32"
                        }
                    },
                    {
                        "title": "new transaction hashes",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/hash32"
                        }
                    },
                    {
                        "title": "new logs",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Log"
                        }
                    }
                ]
            },
            "Filter": {
                "title": "filter",
                "type": "object",
                "properties": {
                    "fromBlock": {
                        "title": "from block",
                        "$ref": "#/components/schemas/uint"
                    },
                    "toBlock": {
                        "title": "to block",
                        "$ref": "#/components/schemas/uint"
                    },
                    "address": {
                        "title": "Address(es)",
                        "oneOf": [
                            {
                                "title": "Address",
                                "$ref": "#/components/schemas/address"
                            },
                            {
                                "title": "Addresses",
                                "$ref": "#/components/schemas/addresses"
                            }
                        ]
                    },
                    "topics": {
                        "title": "Topics",
                        "$ref": "#/components/schemas/FilterTopics"
                    }
                }
            },
            "FilterTopics": {
                "title": "Filter Topics",
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/FilterTopic"
                }
            },
            "FilterTopic": {
                "title": "Filter Topic List Entry",
                "oneOf": [
                    {
                        "title": "Any Topic Match",
                        "type": "null"
                    },
                    {
                        "title": "Single Topic Match",
                        "$ref": "#/components/schemas/bytes32"
                    },
                    {
                        "title": "Multiple Topic Match",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/bytes32"
                        }
                    }
                ]
            },
            "Log": {
                "title": "log",
                "type": "object",
                "required": [
                    "transactionHash"
                ],
                "properties": {
                    "removed": {
                        "title": "removed",
                        "type": "boolean"
                    },
                    "logIndex": {
                        "title": "log index",
                        "$ref": "#/components/schemas/uint"
                    },
                    "transactionIndex": {
                        "title": "transaction index",
                        "$ref": "#/components/schemas/uint"
                    },
                    "transactionHash": {
                        "title": "transaction hash",
                        "$ref": "#/components/schemas/hash32"
                    },
                    "blockHash": {
                        "title": "block hash",
                        "$ref": "#/components/schemas/hash32"
                    },
                    "blockNumber": {
                        "title": "block number",
                        "$ref": "#/components/schemas/uint"
                    },
                    "address": {
                        "title": "address",
                        "$ref": "#/components/schemas/address"
                    },
                    "data": {
                        "title": "data",
                        "$ref": "#/components/schemas/bytes"
                    },
                    "topics": {
                        "title": "topics",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/bytes32"
                        }
                    }
                }
            },
            "ReceiptInfo": {
                "type": "object",
                "title": "Receipt info",
                "required": [
                    "blockHash",
                    "blockNumber",
                    "from",
                    "cumulativeGasUsed",
                    "gasUsed",
                    "logs",
                    "logsBloom",
                    "transactionHash",
                    "transactionIndex",
                    "effectiveGasPrice"
                ],
                "properties": {
                    "transactionHash": {
                        "title": "transaction hash",
                        "$ref": "#/components/schemas/hash32"
                    },
                    "transactionIndex": {
                        "title": "transaction index",
                        "$ref": "#/components/schemas/uint"
                    },
                    "blockHash": {
                        "title": "block hash",
                        "$ref": "#/components/schemas/hash32"
                    },
                    "blockNumber": {
                        "title": "block number",
                        "$ref": "#/components/schemas/uint"
                    },
                    "from": {
                        "title": "from",
                        "$ref": "#/components/schemas/address"
                    },
                    "to": {
                        "title": "to",
                        "description": "Address of the receiver or null in a contract creation transaction.",
                        "$ref": "#/components/schemas/address"
                    },
                    "cumulativeGasUsed": {
                        "title": "cumulative gas used",
                        "description": "The sum of gas used by this transaction and all preceding transactions in the same block.",
                        "$ref": "#/components/schemas/uint"
                    },
                    "gasUsed": {
                        "title": "gas used",
                        "description": "The amount of gas used for this specific transaction alone.",
                        "$ref": "#/components/schemas/uint"
                    },
                    "contractAddress": {
                        "title": "contract address",
                        "description": "The contract address created, if the transaction was a contract creation, otherwise null.",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/address"
                            },
                            {
                                "name": null,
                                "type": "null"
                            }
                        ]
                    },
                    "logs": {
                        "title": "logs",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Log"
                        }
                    },
                    "logsBloom": {
                        "title": "logs bloom",
                        "$ref": "#/components/schemas/bytes256"
                    },
                    "root": {
                        "title": "state root",
                        "description": "The post-transaction state root. Only specified for transactions included before the Byzantium upgrade.",
                        "$ref": "#/components/schemas/hash32"
                    },
                    "status": {
                        "title": "status",
                        "description": "Either 1 (success) or 0 (failure). Only specified for transactions included after the Byzantium upgrade.",
                        "$ref": "#/components/schemas/uint"
                    },
                    "effectiveGasPrice": {
                        "title": "effective gas price",
                        "description": "The actual value per gas deducted from the senders account. Before EIP-1559, this is equal to the transaction's gas price. After, it is equal to baseFeePerGas + min(maxFeePerGas - baseFeePerGas, maxPriorityFeePerGas).",
                        "$ref": "#/components/schemas/uint"
                    }
                }
            },
            "AccountProof": {
                "title": "Account proof",
                "type": "object",
                "required": [
                    "address",
                    "accountProof",
                    "balance",
                    "codeHash",
                    "nonce",
                    "storageHash",
                    "storageProof"
                ],
                "properties": {
                    "address": {
                        "title": "address",
                        "$ref": "#/components/schemas/address"
                    },
                    "accountProof": {
                        "title": "accountProof",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/bytes"
                        }
                    },
                    "balance": {
                        "title": "balance",
                        "$ref": "#/components/schemas/uint256"
                    },
                    "codeHash": {
                        "title": "codeHash",
                        "$ref": "#/components/schemas/hash32"
                    },
                    "nonce": {
                        "title": "nonce",
                        "$ref": "#/components/schemas/uint64"
                    },
                    "storageHash": {
                        "title": "storageHash",
                        "$ref": "#/components/schemas/hash32"
                    },
                    "storageProof": {
                        "title": "Storage proofs",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StorageProof"
                        }
                    }
                }
            },
            "StorageProof": {
                "title": "Storage proof",
                "type": "object",
                "required": [
                    "key",
                    "value",
                    "proof"
                ],
                "properties": {
                    "key": {
                        "title": "key",
                        "$ref": "#/components/schemas/bytesMax32"
                    },
                    "value": {
                        "title": "value",
                        "$ref": "#/components/schemas/uint256"
                    },
                    "proof": {
                        "title": "proof",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/bytes"
                        }
                    }
                }
            },
            "AccessListEntry": {
                "title": "Access list entry",
                "type": "object",
                "properties": {
                    "address": {
                        "$ref": "#/components/schemas/address"
                    },
                    "storageKeys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/hash32"
                        }
                    }
                }
            },
            "AccessList": {
                "title": "Access list",
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/AccessListEntry"
                }
            },
            "Transaction1559Unsigned": {
                "type": "object",
                "title": "EIP-1559 transaction.",
                "required": [
                    "type",
                    "nonce",
                    "gas",
                    "value",
                    "input",
                    "maxFeePerGas",
                    "maxPriorityFeePerGas",
                    "chainId",
                    "accessList"
                ],
                "properties": {
                    "type": {
                        "title": "type",
                        "$ref": "#/components/schemas/byte"
                    },
                    "nonce": {
                        "title": "nonce",
                        "$ref": "#/components/schemas/uint"
                    },
                    "to": {
                        "title": "to address",
                        "$ref": "#/components/schemas/address"
                    },
                    "gas": {
                        "title": "gas limit",
                        "$ref": "#/components/schemas/uint"
                    },
                    "value": {
                        "title": "value",
                        "$ref": "#/components/schemas/uint"
                    },
                    "input": {
                        "title": "input data",
                        "$ref": "#/components/schemas/bytes"
                    },
                    "maxPriorityFeePerGas": {
                        "title": "max priority fee per gas",
                        "description": "Maximum fee per gas the sender is willing to pay to miners in wei",
                        "$ref": "#/components/schemas/uint"
                    },
                    "maxFeePerGas": {
                        "title": "max fee per gas",
                        "description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei",
                        "$ref": "#/components/schemas/uint"
                    },
                    "accessList": {
                        "title": "accessList",
                        "description": "EIP-2930 access list",
                        "$ref": "#/components/schemas/AccessList"
                    },
                    "chainId": {
                        "title": "chainId",
                        "description": "Chain ID that this transaction is valid on.",
                        "$ref": "#/components/schemas/uint"
                    }
                }
            },
            "Transaction2930Unsigned": {
                "type": "object",
                "title": "EIP-2930 transaction.",
                "required": [
                    "type",
                    "nonce",
                    "gas",
                    "value",
                    "input",
                    "gasPrice",
                    "chainId",
                    "accessList"
                ],
                "properties": {
                    "type": {
                        "title": "type",
                        "$ref": "#/components/schemas/byte"
                    },
                    "nonce": {
                        "title": "nonce",
                        "$ref": "#/components/schemas/uint"
                    },
                    "to": {
                        "title": "to address",
                        "$ref": "#/components/schemas/address"
                    },
                    "gas": {
                        "title": "gas limit",
                        "$ref": "#/components/schemas/uint"
                    },
                    "value": {
                        "title": "value",
                        "$ref": "#/components/schemas/uint"
                    },
                    "input": {
                        "title": "input data",
                        "$ref": "#/components/schemas/bytes"
                    },
                    "gasPrice": {
                        "title": "gas price",
                        "description": "The gas price willing to be paid by the sender in wei",
                        "$ref": "#/components/schemas/uint"
                    },
                    "accessList": {
                        "title": "accessList",
                        "description": "EIP-2930 access list",
                        "$ref": "#/components/schemas/AccessList"
                    },
                    "chainId": {
                        "title": "chainId",
                        "description": "Chain ID that this transaction is valid on.",
                        "$ref": "#/components/schemas/uint"
                    }
                }
            },
            "TransactionLegacyUnsigned": {
                "type": "object",
                "title": "Legacy transaction.",
                "required": [
                    "type",
                    "nonce",
                    "gas",
                    "value",
                    "input",
                    "gasPrice"
                ],
                "properties": {
                    "type": {
                        "title": "type",
                        "$ref": "#/components/schemas/byte"
                    },
                    "nonce": {
                        "title": "nonce",
                        "$ref": "#/components/schemas/uint"
                    },
                    "to": {
                        "title": "to address",
                        "$ref": "#/components/schemas/address"
                    },
                    "gas": {
                        "title": "gas limit",
                        "$ref": "#/components/schemas/uint"
                    },
                    "value": {
                        "title": "value",
                        "$ref": "#/components/schemas/uint"
                    },
                    "input": {
                        "title": "input data",
                        "$ref": "#/components/schemas/bytes"
                    },
                    "gasPrice": {
                        "title": "gas price",
                        "description": "The gas price willing to be paid by the sender in wei",
                        "$ref": "#/components/schemas/uint"
                    },
                    "chainId": {
                        "title": "chainId",
                        "description": "Chain ID that this transaction is valid on.",
                        "$ref": "#/components/schemas/uint"
                    }
                }
            },
            "TransactionUnsigned": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/Transaction1559Unsigned"
                    },
                    {
                        "$ref": "#/components/schemas/Transaction2930Unsigned"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionLegacyUnsigned"
                    }
                ]
            },
            "Transaction1559Signed": {
                "title": "Signed 1559 Transaction",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Transaction1559Unsigned"
                    },
                    {
                        "title": "EIP-1559 transaction signature properties.",
                        "required": [
                            "yParity",
                            "r",
                            "s"
                        ],
                        "properties": {
                            "yParity": {
                                "title": "yParity",
                                "description": "The parity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",
                                "$ref": "#/components/schemas/uint"
                            },
                            "r": {
                                "title": "r",
                                "$ref": "#/components/schemas/uint"
                            },
                            "s": {
                                "title": "s",
                                "$ref": "#/components/schemas/uint"
                            }
                        }
                    }
                ]
            },
            "Transaction2930Signed": {
                "title": "Signed 2930 Transaction",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Transaction2930Unsigned"
                    },
                    {
                        "title": "EIP-2930 transaction signature properties.",
                        "required": [
                            "yParity",
                            "r",
                            "s"
                        ],
                        "properties": {
                            "yParity": {
                                "title": "yParity",
                                "description": "The parity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",
                                "$ref": "#/components/schemas/uint"
                            },
                            "r": {
                                "title": "r",
                                "$ref": "#/components/schemas/uint"
                            },
                            "s": {
                                "title": "s",
                                "$ref": "#/components/schemas/uint"
                            }
                        }
                    }
                ]
            },
            "TransactionLegacySigned": {
                "title": "Signed Legacy Transaction",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/TransactionLegacyUnsigned"
                    },
                    {
                        "title": "Legacy transaction signature properties.",
                        "required": [
                            "v",
                            "r",
                            "s"
                        ],
                        "properties": {
                            "v": {
                                "title": "v",
                                "$ref": "#/components/schemas/uint"
                            },
                            "r": {
                                "title": "r",
                                "$ref": "#/components/schemas/uint"
                            },
                            "s": {
                                "title": "s",
                                "$ref": "#/components/schemas/uint"
                            }
                        }
                    }
                ]
            },
            "TransactionSigned": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/Transaction1559Signed"
                    },
                    {
                        "$ref": "#/components/schemas/Transaction2930Signed"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionLegacySigned"
                    }
                ]
            },
            "TransactionInfo": {
                "type": "object",
                "title": "Transaction information",
                "allOf": [
                    {
                        "title": "Contextual information",
                        "required": [
                            "blockHash",
                            "blockNumber",
                            "from",
                            "hash",
                            "transactionIndex"
                        ],
                        "properties": {
                            "blockHash": {
                                "title": "block hash",
                                "$ref": "#/components/schemas/hash32"
                            },
                            "blockNumber": {
                                "title": "block number",
                                "$ref": "#/components/schemas/uint"
                            },
                            "from": {
                                "title": "from address",
                                "$ref": "#/components/schemas/address"
                            },
                            "hash": {
                                "title": "transaction hash",
                                "$ref": "#/components/schemas/hash32"
                            },
                            "transactionIndex": {
                                "title": "transaction index",
                                "$ref": "#/components/schemas/uint"
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/TransactionSigned"
                    }
                ]
            },
            "GenericTransaction": {
                "type": "object",
                "title": "Transaction object generic to all types",
                "properties": {
                    "type": {
                        "title": "type",
                        "$ref": "#/components/schemas/byte"
                    },
                    "nonce": {
                        "title": "nonce",
                        "$ref": "#/components/schemas/uint"
                    },
                    "to": {
                        "title": "to address",
                        "$ref": "#/components/schemas/address"
                    },
                    "from": {
                        "title": "from address",
                        "$ref": "#/components/schemas/address"
                    },
                    "gas": {
                        "title": "gas limit",
                        "$ref": "#/components/schemas/uint"
                    },
                    "value": {
                        "title": "value",
                        "$ref": "#/components/schemas/uint"
                    },
                    "input": {
                        "title": "input data",
                        "$ref": "#/components/schemas/bytes"
                    },
                    "gasPrice": {
                        "title": "gas price",
                        "description": "The gas price willing to be paid by the sender in wei",
                        "$ref": "#/components/schemas/uint"
                    },
                    "maxPriorityFeePerGas": {
                        "title": "max priority fee per gas",
                        "description": "Maximum fee per gas the sender is willing to pay to miners in wei",
                        "$ref": "#/components/schemas/uint"
                    },
                    "maxFeePerGas": {
                        "title": "max fee per gas",
                        "description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei",
                        "$ref": "#/components/schemas/uint"
                    },
                    "accessList": {
                        "title": "accessList",
                        "description": "EIP-2930 access list",
                        "$ref": "#/components/schemas/AccessList"
                    },
                    "chainId": {
                        "title": "chainId",
                        "description": "Chain ID that this transaction is valid on.",
                        "$ref": "#/components/schemas/uint"
                    }
                }
            },
            "Withdrawal": {
                "type": "object",
                "title": "Validator withdrawal",
                "required": [
                    "index",
                    "validatorIndex",
                    "address",
                    "amount"
                ],
                "properties": {
                    "index": {
                        "title": "index of withdrawal",
                        "$ref": "#/components/schemas/uint64"
                    },
                    "validatorIndex": {
                        "title": "index of validator that generated withdrawal",
                        "$ref": "#/components/schemas/uint64"
                    },
                    "address": {
                        "title": "recipient address for withdrawal value",
                        "$ref": "#/components/schemas/address"
                    },
                    "amount": {
                        "title": "value contained in withdrawal",
                        "$ref": "#/components/schemas/uint256"
                    }
                }
            },
            "ForkchoiceStateV1": {
                "title": "Forkchoice state object V1",
                "type": "object",
                "required": [
                    "headBlockHash",
                    "safeBlockHash",
                    "finalizedBlockHash"
                ],
                "properties": {
                    "headBlockHash": {
                        "title": "Head block hash",
                        "$ref": "#/components/schemas/hash32"
                    },
                    "safeBlockHash": {
                        "title": "Safe block hash",
                        "$ref": "#/components/schemas/hash32"
                    },
                    "finalizedBlockHash": {
                        "title": "Finalized block hash",
                        "$ref": "#/components/schemas/hash32"
                    }
                }
            },
            "ForkchoiceUpdatedResponseV1": {
                "title": "Forkchoice updated response",
                "type": "object",
                "required": [
                    "payloadStatus"
                ],
                "properties": {
                    "payloadStatus": {
                        "title": "Payload status",
                        "$ref": "#/components/schemas/RestrictedPayloadStatusV1"
                    },
                    "payloadId": {
                        "title": "Payload id",
                        "$ref": "#/components/schemas/bytes8"
                    }
                }
            },
            "PayloadAttributesV1": {
                "title": "Payload attributes object V1",
                "type": "object",
                "required": [
                    "timestamp",
                    "prevRandao",
                    "suggestedFeeRecipient"
                ],
                "properties": {
                    "timestamp": {
                        "title": "Timestamp",
                        "$ref": "#/components/schemas/uint64"
                    },
                    "prevRandao": {
                        "title": "Previous randao value",
                        "$ref": "#/components/schemas/bytes32"
                    },
                    "suggestedFeeRecipient": {
                        "title": "Suggested fee recipient",
                        "$ref": "#/components/schemas/address"
                    }
                }
            },
            "PayloadAttributesV2": {
                "title": "Payload attributes object V2",
                "type": "object",
                "required": [
                    "timestamp",
                    "prevRandao",
                    "suggestedFeeRecipient",
                    "withdrawals"
                ],
                "properties": {
                    "timestamp": {
                        "$ref": "#/components/schemas/PayloadAttributesV1/properties/timestamp"
                    },
                    "prevRandao": {
                        "$ref": "#/components/schemas/PayloadAttributesV1/properties/prevRandao"
                    },
                    "suggestedFeeRecipient": {
                        "$ref": "#/components/schemas/PayloadAttributesV1/properties/suggestedFeeRecipient"
                    },
                    "withdrawals": {
                        "title": "Withdrawals",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WithdrawalV1"
                        }
                    }
                }
            },
            "PayloadStatusV1": {
                "title": "Payload status object V1",
                "type": "object",
                "required": [
                    "status"
                ],
                "properties": {
                    "status": {
                        "title": "Payload validation status",
                        "type": "string",
                        "enum": [
                            "VALID",
                            "INVALID",
                            "SYNCING",
                            "ACCEPTED",
                            "INVALID_BLOCK_HASH"
                        ]
                    },
                    "latestValidHash": {
                        "title": "The hash of the most recent valid block",
                        "$ref": "#/components/schemas/hash32"
                    },
                    "validationError": {
                        "title": "Validation error message",
                        "type": "string"
                    }
                }
            },
            "RestrictedPayloadStatusV1": {
                "$ref": "#/components/schemas/PayloadStatusV1",
                "properties": {
                    "status": {
                        "$ref": "#/components/schemas/PayloadStatusV1/properties/status",
                        "description": "Set of possible values is restricted to VALID, INVALID, SYNCING",
                        "enum": [
                            "VALID",
                            "INVALID",
                            "SYNCING"
                        ]
                    },
                    "latestValidHash": {
                        "$ref": "#/components/schemas/PayloadStatusV1/properties/latestValidHash"
                    },
                    "validationError": {
                        "$ref": "#/components/schemas/PayloadStatusV1/properties/validationError"
                    }
                }
            },
            "PayloadStatusNoInvalidBlockHash": {
                "$ref": "#/components/schemas/PayloadStatusV1",
                "title": "Payload status object deprecating INVALID_BLOCK_HASH status",
                "properties": {
                    "status": {
                        "$ref": "#/components/schemas/PayloadStatusV1/properties/status",
                        "enum": [
                            "VALID",
                            "INVALID",
                            "SYNCING",
                            "ACCEPTED"
                        ]
                    },
                    "latestValidHash": {
                        "$ref": "#/components/schemas/PayloadStatusV1/properties/latestValidHash"
                    },
                    "validationError": {
                        "$ref": "#/components/schemas/PayloadStatusV1/properties/validationError"
                    }
                }
            },
            "ExecutionPayloadV1": {
                "title": "Execution payload object V1",
                "type": "object",
                "required": [
                    "parentHash",
                    "feeRecipient",
                    "stateRoot",
                    "receiptsRoot",
                    "logsBloom",
                    "prevRandao",
                    "blockNumber",
                    "gasLimit",
                    "gasUsed",
                    "timestamp",
                    "extraData",
                    "baseFeePerGas",
                    "blockHash",
                    "transactions"
                ],
                "properties": {
                    "parentHash": {
                        "title": "Parent block hash",
                        "$ref": "#/components/schemas/hash32"
                    },
                    "feeRecipient": {
                        "title": "Recipient of transaction priority fees",
                        "$ref": "#/components/schemas/address"
                    },
                    "stateRoot": {
                        "title": "State root",
                        "$ref": "#/components/schemas/hash32"
                    },
                    "receiptsRoot": {
                        "title": "Receipts root",
                        "$ref": "#/components/schemas/hash32"
                    },
                    "logsBloom": {
                        "title": "Bloom filter",
                        "$ref": "#/components/schemas/bytes256"
                    },
                    "prevRandao": {
                        "title": "Previous randao value",
                        "$ref": "#/components/schemas/bytes32"
                    },
                    "blockNumber": {
                        "title": "Block number",
                        "$ref": "#/components/schemas/uint64"
                    },
                    "gasLimit": {
                        "title": "Gas limit",
                        "$ref": "#/components/schemas/uint64"
                    },
                    "gasUsed": {
                        "title": "Gas used",
                        "$ref": "#/components/schemas/uint64"
                    },
                    "timestamp": {
                        "title": "Timestamp",
                        "$ref": "#/components/schemas/uint64"
                    },
                    "extraData": {
                        "title": "Extra data",
                        "$ref": "#/components/schemas/bytesMax32"
                    },
                    "baseFeePerGas": {
                        "title": "Base fee per gas",
                        "$ref": "#/components/schemas/uint256"
                    },
                    "blockHash": {
                        "title": "Block hash",
                        "$ref": "#/components/schemas/hash32"
                    },
                    "transactions": {
                        "title": "Transactions",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/bytes"
                        }
                    }
                }
            },
            "WithdrawalV1": {
                "title": "Withdrawal object V1",
                "type": "object",
                "required": [
                    "index",
                    "validatorIndex",
                    "address",
                    "amount"
                ],
                "properties": {
                    "index": {
                        "title": "Withdrawal index",
                        "$ref": "#/components/schemas/uint64"
                    },
                    "validatorIndex": {
                        "title": "Validator index",
                        "$ref": "#/components/schemas/uint64"
                    },
                    "address": {
                        "title": "Withdrawal address",
                        "$ref": "#/components/schemas/address"
                    },
                    "amount": {
                        "title": "Withdrawal amount",
                        "$ref": "#/components/schemas/uint64"
                    }
                }
            },
            "ExecutionPayloadV2": {
                "title": "Execution payload object V2",
                "type": "object",
                "required": [
                    "parentHash",
                    "feeRecipient",
                    "stateRoot",
                    "receiptsRoot",
                    "logsBloom",
                    "prevRandao",
                    "blockNumber",
                    "gasLimit",
                    "gasUsed",
                    "timestamp",
                    "extraData",
                    "baseFeePerGas",
                    "blockHash",
                    "transactions",
                    "withdrawals"
                ],
                "properties": {
                    "parentHash": {
                        "$ref": "#/components/schemas/ExecutionPayloadV1/properties/parentHash"
                    },
                    "feeRecipient": {
                        "$ref": "#/components/schemas/ExecutionPayloadV1/properties/feeRecipient"
                    },
                    "stateRoot": {
                        "$ref": "#/components/schemas/ExecutionPayloadV1/properties/stateRoot"
                    },
                    "receiptsRoot": {
                        "$ref": "#/components/schemas/ExecutionPayloadV1/properties/receiptsRoot"
                    },
                    "logsBloom": {
                        "$ref": "#/components/schemas/ExecutionPayloadV1/properties/logsBloom"
                    },
                    "prevRandao": {
                        "$ref": "#/components/schemas/ExecutionPayloadV1/properties/prevRandao"
                    },
                    "blockNumber": {
                        "$ref": "#/components/schemas/ExecutionPayloadV1/properties/blockNumber"
                    },
                    "gasLimit": {
                        "$ref": "#/components/schemas/ExecutionPayloadV1/properties/gasLimit"
                    },
                    "gasUsed": {
                        "$ref": "#/components/schemas/ExecutionPayloadV1/properties/gasUsed"
                    },
                    "timestamp": {
                        "$ref": "#/components/schemas/ExecutionPayloadV1/properties/timestamp"
                    },
                    "extraData": {
                        "$ref": "#/components/schemas/ExecutionPayloadV1/properties/extraData"
                    },
                    "baseFeePerGas": {
                        "$ref": "#/components/schemas/ExecutionPayloadV1/properties/baseFeePerGas"
                    },
                    "blockHash": {
                        "$ref": "#/components/schemas/ExecutionPayloadV1/properties/blockHash"
                    },
                    "transactions": {
                        "$ref": "#/components/schemas/ExecutionPayloadV1/properties/transactions"
                    },
                    "withdrawals": {
                        "title": "Withdrawals",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WithdrawalV1"
                        }
                    }
                }
            },
            "ExecutionPayloadBodyV1": {
                "title": "Execution payload body object V1",
                "type": "object",
                "required": [
                    "transactions"
                ],
                "properties": {
                    "transactions": {
                        "$ref": "#/components/schemas/ExecutionPayloadV1/properties/transactions"
                    },
                    "withdrawals": {
                        "title": "Withdrawals",
                        "type": [
                            "array",
                            "null"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/WithdrawalV1"
                        }
                    }
                }
            },
            "TransitionConfigurationV1": {
                "title": "Transition configuration object",
                "type": "object",
                "required": [
                    "terminalTotalDifficulty",
                    "terminalBlockHash",
                    "terminalBlockNumber"
                ],
                "properties": {
                    "terminalTotalDifficulty": {
                        "title": "Terminal total difficulty",
                        "$ref": "#/components/schemas/uint256"
                    },
                    "terminalBlockHash": {
                        "title": "Terminal block hash",
                        "$ref": "#/components/schemas/hash32"
                    },
                    "terminalBlockNumber": {
                        "title": "Terminal block number",
                        "$ref": "#/components/schemas/uint64"
                    }
                }
            }
        },
        "tags": {
            "MetaMask": {
                "name": "MetaMask",
                "description": "MetaMask-specific methods."
            },
            "Restricted": {
                "name": "Restricted",
                "description": "Restricted methods. If a method is restricted, the caller must have the corresponding permission via `wallet_requestPermissions` in order to call it."
            },
            "Mobile": {
                "name": "Mobile",
                "description": "Mobile-specific methods."
            }
        },
        "contentDescriptors": {},
        "examplePairings": {},
        "links": {},
        "examples": {}
    }
}
